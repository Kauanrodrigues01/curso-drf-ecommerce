[
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "model",
        "importPath": "pyexpat",
        "description": "pyexpat",
        "isExtraImport": true,
        "detail": "pyexpat",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "ModelForm",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "ModelForm",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "post_delete",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "django.urls",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.urls",
        "description": "django.urls",
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "Address",
        "importPath": "UserProfile.models",
        "description": "UserProfile.models",
        "isExtraImport": true,
        "detail": "UserProfile.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "importPath": "UserProfile.models",
        "description": "UserProfile.models",
        "isExtraImport": true,
        "detail": "UserProfile.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "importPath": "UserProfile.models",
        "description": "UserProfile.models",
        "isExtraImport": true,
        "detail": "UserProfile.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "importPath": "UserProfile.models",
        "description": "UserProfile.models",
        "isExtraImport": true,
        "detail": "UserProfile.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "importPath": "UserProfile.models",
        "description": "UserProfile.models",
        "isExtraImport": true,
        "detail": "UserProfile.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "importPath": "UserProfile.models",
        "description": "UserProfile.models",
        "isExtraImport": true,
        "detail": "UserProfile.models",
        "documentation": {}
    },
    {
        "label": "Address",
        "importPath": "UserProfile.models",
        "description": "UserProfile.models",
        "isExtraImport": true,
        "detail": "UserProfile.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "importPath": "UserProfile.models",
        "description": "UserProfile.models",
        "isExtraImport": true,
        "detail": "UserProfile.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "importPath": "UserProfile.models",
        "description": "UserProfile.models",
        "isExtraImport": true,
        "detail": "UserProfile.models",
        "documentation": {}
    },
    {
        "label": "Address",
        "importPath": "UserProfile.models",
        "description": "UserProfile.models",
        "isExtraImport": true,
        "detail": "UserProfile.models",
        "documentation": {}
    },
    {
        "label": "Cart",
        "importPath": "storeapp.models",
        "description": "storeapp.models",
        "isExtraImport": true,
        "detail": "storeapp.models",
        "documentation": {}
    },
    {
        "label": "Cart",
        "importPath": "storeapp.models",
        "description": "storeapp.models",
        "isExtraImport": true,
        "detail": "storeapp.models",
        "documentation": {}
    },
    {
        "label": "Cartitems",
        "importPath": "storeapp.models",
        "description": "storeapp.models",
        "isExtraImport": true,
        "detail": "storeapp.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "storeapp.models",
        "description": "storeapp.models",
        "isExtraImport": true,
        "detail": "storeapp.models",
        "documentation": {}
    },
    {
        "label": "Cart",
        "importPath": "storeapp.models",
        "description": "storeapp.models",
        "isExtraImport": true,
        "detail": "storeapp.models",
        "documentation": {}
    },
    {
        "label": "Cartitems",
        "importPath": "storeapp.models",
        "description": "storeapp.models",
        "isExtraImport": true,
        "detail": "storeapp.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "storeapp.models",
        "description": "storeapp.models",
        "isExtraImport": true,
        "detail": "storeapp.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "storeapp.models",
        "description": "storeapp.models",
        "isExtraImport": true,
        "detail": "storeapp.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "storeapp.models",
        "description": "storeapp.models",
        "isExtraImport": true,
        "detail": "storeapp.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "storeapp.models",
        "description": "storeapp.models",
        "isExtraImport": true,
        "detail": "storeapp.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "storeapp.models",
        "description": "storeapp.models",
        "isExtraImport": true,
        "detail": "storeapp.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "storeapp.models",
        "description": "storeapp.models",
        "isExtraImport": true,
        "detail": "storeapp.models",
        "documentation": {}
    },
    {
        "label": "Cart",
        "importPath": "storeapp.models",
        "description": "storeapp.models",
        "isExtraImport": true,
        "detail": "storeapp.models",
        "documentation": {}
    },
    {
        "label": "Cartitems",
        "importPath": "storeapp.models",
        "description": "storeapp.models",
        "isExtraImport": true,
        "detail": "storeapp.models",
        "documentation": {}
    },
    {
        "label": "SavedItem",
        "importPath": "storeapp.models",
        "description": "storeapp.models",
        "isExtraImport": true,
        "detail": "storeapp.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "storeapp.models",
        "description": "storeapp.models",
        "isExtraImport": true,
        "detail": "storeapp.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "storeapp.models",
        "description": "storeapp.models",
        "isExtraImport": true,
        "detail": "storeapp.models",
        "documentation": {}
    },
    {
        "label": "Cart",
        "importPath": "storeapp.models",
        "description": "storeapp.models",
        "isExtraImport": true,
        "detail": "storeapp.models",
        "documentation": {}
    },
    {
        "label": "Cartitems",
        "importPath": "storeapp.models",
        "description": "storeapp.models",
        "isExtraImport": true,
        "detail": "storeapp.models",
        "documentation": {}
    },
    {
        "label": "SavedItem",
        "importPath": "storeapp.models",
        "description": "storeapp.models",
        "isExtraImport": true,
        "detail": "storeapp.models",
        "documentation": {}
    },
    {
        "label": "AddressForm",
        "importPath": "storeapp.forms",
        "description": "storeapp.forms",
        "isExtraImport": true,
        "detail": "storeapp.forms",
        "documentation": {}
    },
    {
        "label": "APIClient",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APIClient",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APIClient",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APIClient",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "TestBaseCartsViews",
        "importPath": "api.tests.tests_carts.base.test_base_carts_views",
        "description": "api.tests.tests_carts.base.test_base_carts_views",
        "isExtraImport": true,
        "detail": "api.tests.tests_carts.base.test_base_carts_views",
        "documentation": {}
    },
    {
        "label": "TestBaseCartsAndItemsViews",
        "importPath": "api.tests.tests_carts.base.test_base_carts_views",
        "description": "api.tests.tests_carts.base.test_base_carts_views",
        "isExtraImport": true,
        "detail": "api.tests.tests_carts.base.test_base_carts_views",
        "documentation": {}
    },
    {
        "label": "CartitemsSerializer",
        "importPath": "api.serializers",
        "description": "api.serializers",
        "isExtraImport": true,
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "CategorySerializer",
        "importPath": "api.serializers",
        "description": "api.serializers",
        "isExtraImport": true,
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "ProductSerializer",
        "importPath": "api.serializers",
        "description": "api.serializers",
        "isExtraImport": true,
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "importPath": "api.serializers",
        "description": "api.serializers",
        "isExtraImport": true,
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "cart",
        "importPath": "storeapp.views",
        "description": "storeapp.views",
        "isExtraImport": true,
        "detail": "storeapp.views",
        "documentation": {}
    },
    {
        "label": "TestBaseCategoryViews",
        "importPath": "api.tests.tests_categories.base.test_base_category_views",
        "description": "api.tests.tests_categories.base.test_base_category_views",
        "isExtraImport": true,
        "detail": "api.tests.tests_categories.base.test_base_category_views",
        "documentation": {}
    },
    {
        "label": "TestBaseProductViews",
        "importPath": "api.tests.tests_products.base.test_base_product_views",
        "description": "api.tests.tests_products.base.test_base_product_views",
        "isExtraImport": true,
        "detail": "api.tests.tests_products.base.test_base_product_views",
        "documentation": {}
    },
    {
        "label": "email",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "email",
        "description": "email",
        "detail": "email",
        "documentation": {}
    },
    {
        "label": "TestBaseUserViews",
        "importPath": "api.tests.tests_users.base.test_base_user_views",
        "description": "api.tests.tests_users.base.test_base_user_views",
        "isExtraImport": true,
        "detail": "api.tests.tests_users.base.test_base_user_views",
        "documentation": {}
    },
    {
        "label": "BasePermission",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "SAFE_METHODS",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAdminUser",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "validate_string_field",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "validate_password_strength",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "ModelViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "ModelViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "ListCreateAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "RetrieveUpdateDestroyAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "CreateAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "RetrieveUpdateDestroyAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "NotFound",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "get_random_string",
        "importPath": "django.utils.crypto",
        "description": "django.utils.crypto",
        "isExtraImport": true,
        "detail": "django.utils.crypto",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "email.policy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "email.policy",
        "description": "email.policy",
        "detail": "email.policy",
        "documentation": {}
    },
    {
        "label": "default",
        "importPath": "email.policy",
        "description": "email.policy",
        "isExtraImport": true,
        "detail": "email.policy",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "Csv",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "dj_database_url",
        "description": "dj_database_url",
        "isExtraImport": true,
        "detail": "dj_database_url",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenBlacklistView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "get_schema_view",
        "importPath": "drf_yasg.views",
        "description": "drf_yasg.views",
        "isExtraImport": true,
        "detail": "drf_yasg.views",
        "documentation": {}
    },
    {
        "label": "openapi",
        "importPath": "drf_yasg",
        "description": "drf_yasg",
        "isExtraImport": true,
        "detail": "drf_yasg",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "Add",
        "importPath": "ast",
        "description": "ast",
        "isExtraImport": true,
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "install",
        "importPath": "gettext",
        "description": "gettext",
        "isExtraImport": true,
        "detail": "gettext",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "validate_email",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "UserProfile.migrations.0001_initial",
        "description": "UserProfile.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Address',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "UserProfile.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "UserProfile.migrations.0002_address_customer",
        "description": "UserProfile.migrations.0002_address_customer",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('UserProfile', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='address',\n            name='customer',\n            field=models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='UserProfile.customer'),\n        ),",
        "detail": "UserProfile.migrations.0002_address_customer",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "UserProfile.migrations.0003_alter_address_customer",
        "description": "UserProfile.migrations.0003_alter_address_customer",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('UserProfile', '0002_address_customer'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='address',\n            name='customer',\n            field=models.OneToOneField(default='', on_delete=django.db.models.deletion.CASCADE, to='UserProfile.customer'),\n        ),",
        "detail": "UserProfile.migrations.0003_alter_address_customer",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "UserProfile.migrations.0004_auto_20220218_0019",
        "description": "UserProfile.migrations.0004_auto_20220218_0019",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('UserProfile', '0003_alter_address_customer'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='customer',\n            name='email',\n            field=models.EmailField(blank=True, default=None, max_length=100, null=True),\n        ),",
        "detail": "UserProfile.migrations.0004_auto_20220218_0019",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "UserProfile.migrations.0005_customer_username",
        "description": "UserProfile.migrations.0005_customer_username",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('UserProfile', '0004_auto_20220218_0019'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='customer',\n            name='username',\n            field=models.CharField(blank=True, default=None, max_length=100, null=True),\n        ),",
        "detail": "UserProfile.migrations.0005_customer_username",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "UserProfile.migrations.0006_alter_customer_email",
        "description": "UserProfile.migrations.0006_alter_customer_email",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('UserProfile', '0005_customer_username'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='customer',\n            name='email',\n            field=models.EmailField(blank=True, default=None, max_length=100, null=True, unique=True),\n        ),",
        "detail": "UserProfile.migrations.0006_alter_customer_email",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "UserProfile.migrations.0007_remove_customer_username",
        "description": "UserProfile.migrations.0007_remove_customer_username",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('UserProfile', '0006_alter_customer_email'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='customer',\n            name='username',\n        ),\n    ]",
        "detail": "UserProfile.migrations.0007_remove_customer_username",
        "documentation": {}
    },
    {
        "label": "UserprofileConfig",
        "kind": 6,
        "importPath": "UserProfile.apps",
        "description": "UserProfile.apps",
        "peekOfCode": "class UserprofileConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'UserProfile'",
        "detail": "UserProfile.apps",
        "documentation": {}
    },
    {
        "label": "CreateUserForm",
        "kind": 6,
        "importPath": "UserProfile.forms",
        "description": "UserProfile.forms",
        "peekOfCode": "class CreateUserForm(UserCreationForm):\n    class Meta:\n        model = get_user_model()\n        fields = ['first_name', 'last_name', 'email', 'password1', 'password2']",
        "detail": "UserProfile.forms",
        "documentation": {}
    },
    {
        "label": "Customer",
        "kind": 6,
        "importPath": "UserProfile.models",
        "description": "UserProfile.models",
        "peekOfCode": "class Customer(models.Model):\n    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)\n    # username = models.CharField(max_length=100, default= None, null=True, blank=True)\n    first_name = models.CharField(max_length=100, default= None, null=True, blank=True)\n    last_name = models.CharField(max_length=100, default= None, null=True, blank=True)\n    email = models.EmailField(max_length=100, default= None, null=True, blank=True, unique=True)\n    def __str__(self):\n        return self.email\nclass Address(models.Model):\n    customer = models.OneToOneField(Customer, on_delete=models.CASCADE, default='')",
        "detail": "UserProfile.models",
        "documentation": {}
    },
    {
        "label": "Address",
        "kind": 6,
        "importPath": "UserProfile.models",
        "description": "UserProfile.models",
        "peekOfCode": "class Address(models.Model):\n    customer = models.OneToOneField(Customer, on_delete=models.CASCADE, default='')\n    home_address = models.CharField(max_length=50)\n    bus_stop = models.CharField(max_length=20)\n    city = models.CharField(max_length=20)\n    state = models.CharField(max_length=20)\n    def __str__(self):\n        return self.home_address\n@receiver(post_save, sender=settings.AUTH_USER_MODEL)\ndef CreateCustomer(sender, instance, created, **kwargs):",
        "detail": "UserProfile.models",
        "documentation": {}
    },
    {
        "label": "CreateCustomer",
        "kind": 2,
        "importPath": "UserProfile.models",
        "description": "UserProfile.models",
        "peekOfCode": "def CreateCustomer(sender, instance, created, **kwargs):\n    if created:\n        customer = Customer.objects.create(user=instance)\n        customer.first_name = instance.first_name\n        customer.last_name = instance.last_name\n        customer.email = instance.email\n        customer.save()\n@receiver(post_save, sender=Customer)\ndef createProfile(sender, instance, created, *args, **kwargs):\n    customer_user = instance.user",
        "detail": "UserProfile.models",
        "documentation": {}
    },
    {
        "label": "createProfile",
        "kind": 2,
        "importPath": "UserProfile.models",
        "description": "UserProfile.models",
        "peekOfCode": "def createProfile(sender, instance, created, *args, **kwargs):\n    customer_user = instance.user\n    if created == False:\n        customer_user.first_name= instance.first_name\n        customer_user.email = instance.email\n        customer_user.last_name = instance.last_name\n        customer_user.save()",
        "detail": "UserProfile.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "UserProfile.urls",
        "description": "UserProfile.urls",
        "peekOfCode": "urlpatterns = [\n     path('signin', views.signin, name = 'signin'),\n     path('signup', views.signup, name = 'signup'),\n     path('signout', views.signout, name = 'signout'),\n     path('changeaddress', views.changeAddress, name = 'changeaddress'),\n]",
        "detail": "UserProfile.urls",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": "UserProfile.views",
        "description": "UserProfile.views",
        "peekOfCode": "def signup(request):\n    form =  CreateUserForm()\n    if request.method == 'POST':\n        form = CreateUserForm(request.POST)\n        if form.is_valid():\n            form.save()\n            messages.info(request, 'Account Created! You can Login')\n            return redirect('signin')\n    context = {'form': form}\n    return render(request, 'UserProfile/signup.html', context)",
        "detail": "UserProfile.views",
        "documentation": {}
    },
    {
        "label": "signin",
        "kind": 2,
        "importPath": "UserProfile.views",
        "description": "UserProfile.views",
        "peekOfCode": "def signin(request):\n    cart = Cart.objects.get(session_id = request.session['nonuser'], completed=False)\n    if request.method == 'POST':\n        email = request.POST['email']\n        password = request.POST['password']\n        user = authenticate(request, email=email, password=password)\n        if user is not None:\n            login(request, user)\n            cart.owner = request.user.customer\n            cart.save()",
        "detail": "UserProfile.views",
        "documentation": {}
    },
    {
        "label": "signout",
        "kind": 2,
        "importPath": "UserProfile.views",
        "description": "UserProfile.views",
        "peekOfCode": "def signout(request):\n    logout(request)\n    return redirect('index')\ndef changeAddress(request):\n    customer = request.user.customer\n    address = Address.objects.get(customer=customer)\n    form = AddressForm(instance=address)\n    if request.method == 'POST':\n        form = AddressForm(request.POST,instance=address)\n        if form.is_valid():",
        "detail": "UserProfile.views",
        "documentation": {}
    },
    {
        "label": "changeAddress",
        "kind": 2,
        "importPath": "UserProfile.views",
        "description": "UserProfile.views",
        "peekOfCode": "def changeAddress(request):\n    customer = request.user.customer\n    address = Address.objects.get(customer=customer)\n    form = AddressForm(instance=address)\n    if request.method == 'POST':\n        form = AddressForm(request.POST,instance=address)\n        if form.is_valid():\n            new_address = form.save(commit=False)\n            new_address.customer = customer\n            new_address.save()",
        "detail": "UserProfile.views",
        "documentation": {}
    },
    {
        "label": "TestBaseCartsViews",
        "kind": 6,
        "importPath": "api.tests.tests_carts.base.test_base_carts_views",
        "description": "api.tests.tests_carts.base.test_base_carts_views",
        "peekOfCode": "class TestBaseCartsViews(TestCase):\n    @classmethod\n    def setUpTestData(cls):\n        cls.client = APIClient()\n        cls.url_cart = reverse('cart')\n        cls.user = User.objects.create_user(email='TesteUser@gmail.com', first_name='Teste', last_name='Teste', password='T#12345')\n        cls.user_credentials = {\n            'email': 'TesteUser@gmail.com',\n            'password': 'T#12345'\n        }",
        "detail": "api.tests.tests_carts.base.test_base_carts_views",
        "documentation": {}
    },
    {
        "label": "TestBaseCartsAndItemsViews",
        "kind": 6,
        "importPath": "api.tests.tests_carts.base.test_base_carts_views",
        "description": "api.tests.tests_carts.base.test_base_carts_views",
        "peekOfCode": "class TestBaseCartsAndItemsViews(TestCase):\n    @classmethod\n    def setUpTestData(cls):\n        cls.client = APIClient()\n        cls.url_cart = reverse('cart')\n        cls.user = User.objects.create_user(email='TesteUser@gmail.com', first_name='Teste', last_name='Teste', password='T#12345')\n        cls.user_credentials = {\n            'email': 'TesteUser@gmail.com',\n            'password': 'T#12345'\n        }",
        "detail": "api.tests.tests_carts.base.test_base_carts_views",
        "documentation": {}
    },
    {
        "label": "TestCartsViews",
        "kind": 6,
        "importPath": "api.tests.tests_carts.test_carts_views",
        "description": "api.tests.tests_carts.test_carts_views",
        "peekOfCode": "class TestCartsViews(TestBaseCartsViews):\n    def test_create_a_card(self):\n        self.client.credentials(HTTP_AUTHORIZATION=f'Bearer {self.token_user}')\n        response = self.client.post(self.url_cart)\n        customer = Customer.objects.get(user=self.user)\n        self.assertTrue(Cart.objects.filter(owner=customer).exists())\n        self.assertEqual(response.status_code, 201)\n    def test_whether_an_error_appears_when_trying_to_create_a_cart_if_there_is_already_a_cart_created(self):\n        self.client.credentials(HTTP_AUTHORIZATION=f'Bearer {self.token_user}')\n        response = self.client.post(self.url_cart)",
        "detail": "api.tests.tests_carts.test_carts_views",
        "documentation": {}
    },
    {
        "label": "TestCartsAndItemsViews",
        "kind": 6,
        "importPath": "api.tests.tests_carts.test_carts_views",
        "description": "api.tests.tests_carts.test_carts_views",
        "peekOfCode": "class TestCartsAndItemsViews(TestBaseCartsAndItemsViews):\n    # TEST LIST ITEMS\n    def test_list_products_from_cart(self):\n        self.client.credentials(HTTP_AUTHORIZATION=f'Bearer {self.token_user}')\n        response = self.client.get(reverse('cartitems-list'))\n        serializer_cartitem_product2 = CartitemsSerializer(self.cartitem_product2)\n        serializer_cartitem_product3 = CartitemsSerializer(self.cartitem_product3)\n        self.assertIn(serializer_cartitem_product2.data, response.data)\n        self.assertIn(serializer_cartitem_product3.data, response.data)\n        self.assertEqual(response.status_code, 200)",
        "detail": "api.tests.tests_carts.test_carts_views",
        "documentation": {}
    },
    {
        "label": "TestBaseCategoryViews",
        "kind": 6,
        "importPath": "api.tests.tests_categories.base.test_base_category_views",
        "description": "api.tests.tests_categories.base.test_base_category_views",
        "peekOfCode": "class TestBaseCategoryViews(TestCase):\n    @classmethod\n    def setUpTestData(cls):\n        cls.client = APIClient()\n        cls.category1 = Category.objects.create(\n            title='Category test 1',\n            slug='category-test-1',\n            icon='icon1.png'\n        )\n        cls.category2 = Category.objects.create(",
        "detail": "api.tests.tests_categories.base.test_base_category_views",
        "documentation": {}
    },
    {
        "label": "TestCategoryViews",
        "kind": 6,
        "importPath": "api.tests.tests_categories.tests_category_views",
        "description": "api.tests.tests_categories.tests_category_views",
        "peekOfCode": "class TestCategoryViews(TestBaseCategoryViews):\n    def test_list_categories(self):\n        response = self.client.get(reverse('category-list'))\n        serializer_category1 = CategorySerializer(Category.objects.get(category_id=self.category1.category_id))\n        self.assertIn(serializer_category1.data, response.data)\n        self.assertEqual(response.status_code, 200)\n    def test_detail_category(self):\n        response = self.client.get(reverse('category-detail', kwargs={'category_id': self.category1.category_id}))\n        serializer_category1 = CategorySerializer(Category.objects.get(category_id=self.category1.category_id))\n        self.assertEqual(serializer_category1.data, response.data)",
        "detail": "api.tests.tests_categories.tests_category_views",
        "documentation": {}
    },
    {
        "label": "TestBaseProductViews",
        "kind": 6,
        "importPath": "api.tests.tests_products.base.test_base_product_views",
        "description": "api.tests.tests_products.base.test_base_product_views",
        "peekOfCode": "class TestBaseProductViews(TestCase):\n    @classmethod\n    def setUpTestData(cls):\n        cls.client = APIClient()  # Inicialize o cliente aqui\n        # Crie os produtos\n        cls.product1 = Product.objects.create(\n            name='Produto teste 1',\n            description='Descrição teste 1',\n            discount=True,\n            old_price=200.00,",
        "detail": "api.tests.tests_products.base.test_base_product_views",
        "documentation": {}
    },
    {
        "label": "TestProductsViews",
        "kind": 6,
        "importPath": "api.tests.tests_products.tests_products_views",
        "description": "api.tests.tests_products.tests_products_views",
        "peekOfCode": "class TestProductsViews(TestBaseProductViews):\n    def test_list_products(self):\n        response = self.client.get(reverse('product-list'))\n        serializer_product1 = ProductSerializer(Product.objects.get(id=self.product1.id))\n        self.assertIn(serializer_product1.data, response.data)\n        self.assertEqual(response.status_code, 200)\n    def test_detail_product(self):\n        response = self.client.get(reverse('product-detail', kwargs={'id': self.product1.id}))\n        serializer_product1 = ProductSerializer(Product.objects.get(id=self.product1.id))\n        self.assertEqual(serializer_product1.data, response.data)",
        "detail": "api.tests.tests_products.tests_products_views",
        "documentation": {}
    },
    {
        "label": "TestBaseUserViews",
        "kind": 6,
        "importPath": "api.tests.tests_users.base.test_base_user_views",
        "description": "api.tests.tests_users.base.test_base_user_views",
        "peekOfCode": "class TestBaseUserViews(TestCase):\n    @classmethod\n    def setUpTestData(cls):\n        cls.client = APIClient()\n        cls.url_register_user = reverse('user-register')\n        cls.data_user = {\n            'email': 'test22@gmail.com',\n            'first_name': 'John',\n            'last_name': 'Fridey',\n            'password': '#Password11',",
        "detail": "api.tests.tests_users.base.test_base_user_views",
        "documentation": {}
    },
    {
        "label": "TestUserViews",
        "kind": 6,
        "importPath": "api.tests.tests_users.test_user_views",
        "description": "api.tests.tests_users.test_user_views",
        "peekOfCode": "class TestUserViews(TestBaseUserViews):\n    def test_if_the_user_me_route_returns_the_logged_in_user(self):\n        self.client.credentials(HTTP_AUTHORIZATION=f'Bearer {self.token_user}')\n        response = self.client.get(reverse('user-me'))\n        serializer = UserSerializer(self.user_test)\n        self.assertEqual(response.data, serializer.data)\n        self.assertEqual(response.status_code, 200)\n    # TEST CREATE ROUTE\n    def test_create_user(self):\n        response = self.client.post(self.url_register_user, self.data_user)",
        "detail": "api.tests.tests_users.test_user_views",
        "documentation": {}
    },
    {
        "label": "ApiConfig",
        "kind": 6,
        "importPath": "api.apps",
        "description": "api.apps",
        "peekOfCode": "class ApiConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'api'",
        "detail": "api.apps",
        "documentation": {}
    },
    {
        "label": "ProductsPermissionsViews",
        "kind": 6,
        "importPath": "api.permissions",
        "description": "api.permissions",
        "peekOfCode": "class ProductsPermissionsViews(BasePermission):\n    def has_permission(self, request, view):\n        if request.method in SAFE_METHODS:\n            return True\n        if request.method in ('PATCH', 'DELETE', 'POST'):\n            return request.user.is_authenticated and request.user.is_staff\n        return super().has_permission(request, view)\nclass CategoriesPermissionsViews(BasePermission):\n    def has_permission(self, request, view):\n        if request.method in SAFE_METHODS:",
        "detail": "api.permissions",
        "documentation": {}
    },
    {
        "label": "CategoriesPermissionsViews",
        "kind": 6,
        "importPath": "api.permissions",
        "description": "api.permissions",
        "peekOfCode": "class CategoriesPermissionsViews(BasePermission):\n    def has_permission(self, request, view):\n        if request.method in SAFE_METHODS:\n            return True\n        if request.method in ('PATCH', 'DELETE', 'POST'):\n            return request.user.is_authenticated and request.user.is_staff\n        return super().has_permission(request, view)\nclass UserCreatePermissionView(BasePermission):\n    def has_permission(self, request, view):\n        return not request.user.is_authenticated",
        "detail": "api.permissions",
        "documentation": {}
    },
    {
        "label": "UserCreatePermissionView",
        "kind": 6,
        "importPath": "api.permissions",
        "description": "api.permissions",
        "peekOfCode": "class UserCreatePermissionView(BasePermission):\n    def has_permission(self, request, view):\n        return not request.user.is_authenticated",
        "detail": "api.permissions",
        "documentation": {}
    },
    {
        "label": "ProductSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class ProductSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Product\n        fields = ['id', 'name', 'description', 'category', 'slug', 'inventory', 'old_price', 'price', 'image', 'discount', 'top_deal', 'flash_sales']\n        read_only_fields = ['price']\n    def validate(self, attrs):\n        required_fields = ['name', 'slug', 'inventory', 'old_price']\n        request = self.context.get('request')\n        errors = defaultdict(list)\n        for field in required_fields:",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "CategorySerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class CategorySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Category\n        fields = ['category_id', 'title', 'slug', 'featured_product', 'icon']\n    def validate(self, attrs):\n        required_fields = ['title', 'slug']\n        request = self.context.get('request')\n        errors = defaultdict(list)\n        for field in required_fields:\n            if request.method == 'PATCH':",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    password = serializers.CharField(write_only=True)\n    password_confirmation = serializers.CharField(write_only=True)\n    class Meta:\n        model = User\n        fields = ['id', 'email', 'first_name', 'last_name', 'password', 'password_confirmation']\n    def validate(self, attrs):\n        required_fields = ['email', 'first_name', 'last_name', 'password', 'password_confirmation']\n        request = self.context.get('request')\n        errors = defaultdict(list)",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "UserUpdateSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class UserUpdateSerializer(serializers.ModelSerializer):\n    current_password = serializers.CharField(write_only=True, required=False)\n    password = serializers.CharField(write_only=True, required=False)\n    password_confirmation = serializers.CharField(write_only=True, required=False)\n    class Meta:\n        model = User\n        fields = ['email', 'first_name', 'last_name', 'current_password', 'password', 'password_confirmation']\n    def validate(self, attrs):\n        user = self.context.get('user')\n        current_password = attrs.get('current_password')",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "CartSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class CartSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Cart\n        fields = ['cart_id', 'owner', 'created', 'completed', 'session_id', 'num_of_items', 'cart_total']\n        read_only_fields = ['cart_id', 'created', 'num_of_items', 'cart_total', 'owner']\n    def validate(self, attrs):\n        errors = defaultdict(list)\n        user = self.context.get('user')\n        customer = Customer.objects.get(user=user)\n        if Cart.objects.filter(owner=customer).exists():",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "CartitemsSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class CartitemsSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Cartitems\n        fields = ['id', 'cart', 'product', 'quantity', 'subTotal']\n        read_only_fields = ['subTotal']\n    def validate(self, attrs):\n        errors = defaultdict(list)\n        product = attrs.get('product')\n        quantity = attrs.get('quantity')\n        if quantity is not None and quantity <= 0:",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "SavedItemSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class SavedItemSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = SavedItem\n        fields = ['id', 'owner', 'product', 'added']\n    def validate(self, attrs):\n        errors = defaultdict(list)\n        # Verificação se o campo 'product' está vazio\n        if attrs.get('product') is None:\n            errors['product'].append('Product cannot be null.')\n        # Verificação para 'added'",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "api.urls",
        "description": "api.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'products', ProductViewSet, basename='product')\nrouter.register(r'categories', CategoryViewSet, basename='category')\nrouter.register(r'saved-items', SavedItemViewSet, basename='saveditem')\nurlpatterns = [\n    path('', include(router.urls)),\n    path('user/register/', UserCreateView.as_view(), name='user-register'),\n    path('user/me/', UserDetailMeView.as_view(), name='user-me'),\n    path('user/', UserViewAdmin.as_view({'get': 'list'}), name='user-list'),\n    path('user/<int:id>/', UserViewAdmin.as_view({'get': 'retrieve'}), name='user-detail'),",
        "detail": "api.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "api.urls",
        "description": "api.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n    path('user/register/', UserCreateView.as_view(), name='user-register'),\n    path('user/me/', UserDetailMeView.as_view(), name='user-me'),\n    path('user/', UserViewAdmin.as_view({'get': 'list'}), name='user-list'),\n    path('user/<int:id>/', UserViewAdmin.as_view({'get': 'retrieve'}), name='user-detail'),\n    path('carts/', CartView.as_view(), name='cart'),\n    path('carts/items/', CartitemsView.as_view(), name='cartitems-list'),\n    path('carts/items/<int:id>/', CartitemsDetailView.as_view(), name='cartitems-detail')\n]",
        "detail": "api.urls",
        "documentation": {}
    },
    {
        "label": "ProductViewSet",
        "kind": 6,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "class ProductViewSet(ModelViewSet):\n    queryset = Product.objects.all()\n    serializer_class = ProductSerializer\n    permission_classes = [ProductsPermissionsViews,]\n    lookup_field = 'id' \n    def retrieve(self, request, *args, **kwargs):\n        try:\n            instance = self.get_queryset().get(id=kwargs['id'])\n        except Product.DoesNotExist:\n            raise NotFound({'detail': 'Product Not Found'})",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "CategoryViewSet",
        "kind": 6,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "class CategoryViewSet(ModelViewSet):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\n    permission_classes = [CategoriesPermissionsViews,]\n    lookup_field = 'category_id'\n    def retrieve(self, request, *args, **kwargs):\n        try:\n            instance = self.get_queryset().get(category_id=kwargs['category_id'])\n        except Category.DoesNotExist:\n            raise NotFound({'detail': 'Category Not Found'})",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "CartView",
        "kind": 6,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "class CartView(APIView):\n    permission_classes = [IsAuthenticated]\n    def post(self, request, *args, **kwargs):\n        # Verifica se já existe uma session_key, se não, gera uma\n        if not request.session.session_key:\n            request.session.create()\n        # Obtém o session_id da sessão atual ou gera uma nova chave\n        session_id = request.session.session_key or get_random_string(32)\n        data = {\n            'session_id': session_id,",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "CartitemsView",
        "kind": 6,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "class CartitemsView(ListCreateAPIView):\n    serializer_class = CartitemsSerializer\n    permission_classes = [IsAuthenticated]\n    def get_queryset(self):\n        user = self.request.user\n        customer = Customer.objects.get(user=user)\n        cart = Cart.objects.filter(owner=customer).first()\n        if not cart:\n            raise NotFound(detail=\"Cart not found.\")\n        return Cartitems.objects.filter(cart=cart)",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "CartitemsDetailView",
        "kind": 6,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "class CartitemsDetailView(RetrieveUpdateDestroyAPIView):\n    permission_classes = [IsAuthenticated]\n    http_method_names = ['patch', 'delete']\n    serializer_class = CartitemsSerializer\n    lookup_field = 'id'\n    def patch(self, request, id):\n        quantity = request.data.get('quantity')\n        data = {\n            'quantity': quantity\n        }",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "SavedItemViewSet",
        "kind": 6,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "class SavedItemViewSet(ModelViewSet):\n    queryset = SavedItem.objects.all()\n    serializer_class = SavedItemSerializer\n    permission_classes = [IsAuthenticated]\n    http_method_names = ['get', 'post', 'delete']\n    def get_queryset(self):\n        customer = Customer.objects.get(user=self.request.user)\n        return SavedItem.objects.filter(owner=customer)\n    def perform_create(self, serializer):\n        customer = Customer.objects.get(user=self.request.user)",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "UserCreateView",
        "kind": 6,
        "importPath": "api.views_users",
        "description": "api.views_users",
        "peekOfCode": "class UserCreateView(CreateAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    permission_classes = [UserCreatePermissionView]\n    http_method_names = ['post']\nclass UserDetailMeView(RetrieveUpdateDestroyAPIView):\n    serializer_class = UserSerializer\n    permission_classes = [IsAuthenticated]\n    def get_object(self):\n        return self.request.user",
        "detail": "api.views_users",
        "documentation": {}
    },
    {
        "label": "UserDetailMeView",
        "kind": 6,
        "importPath": "api.views_users",
        "description": "api.views_users",
        "peekOfCode": "class UserDetailMeView(RetrieveUpdateDestroyAPIView):\n    serializer_class = UserSerializer\n    permission_classes = [IsAuthenticated]\n    def get_object(self):\n        return self.request.user\n    def update(self, request, *args, **kwargs):\n        partial = kwargs.pop('partial', False)\n        instance = self.get_object()\n        serializer = UserUpdateSerializer(instance, data=request.data, partial=partial, context={'user': request.user})\n        serializer.is_valid(raise_exception=True)",
        "detail": "api.views_users",
        "documentation": {}
    },
    {
        "label": "UserViewAdmin",
        "kind": 6,
        "importPath": "api.views_users",
        "description": "api.views_users",
        "peekOfCode": "class UserViewAdmin(ModelViewSet):\n    serializer_class = UserSerializer\n    queryset = User.objects.all()\n    permission_classes = [IsAdminUser]\n    http_method_names = ['get']\n    lookup_field = 'id'",
        "detail": "api.views_users",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "core.migrations.0001_initial",
        "description": "core.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "core.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "core.migrations.0002_alter_user_username",
        "description": "core.migrations.0002_alter_user_username",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='user',\n            name='username',\n            field=models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username'),\n        ),",
        "detail": "core.migrations.0002_alter_user_username",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "core.migrations.0003_remove_user_username",
        "description": "core.migrations.0003_remove_user_username",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0002_alter_user_username'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='user',\n            name='username',\n        ),\n    ]",
        "detail": "core.migrations.0003_remove_user_username",
        "documentation": {}
    },
    {
        "label": "CustomUserAdmin",
        "kind": 6,
        "importPath": "core.admin",
        "description": "core.admin",
        "peekOfCode": "class CustomUserAdmin(UserAdmin):\n    \"\"\"Define admin model for custom User model with no username field.\"\"\"\n    # fieldsets = (\n    #     (None, {'fields': ('email', 'password')}),\n    #     (_('Personal info'), {'fields': ('first_name', 'last_name')}),\n    #     (_('Permissions'), {'fields': ('is_active', 'is_staff', 'is_superuser',\n    #                                    'groups', 'user_permissions')}),\n    #     (_('Important dates'), {'fields': ('last_login', 'date_joined')}),\n    # )\n    add_fieldsets = (",
        "detail": "core.admin",
        "documentation": {}
    },
    {
        "label": "CoreConfig",
        "kind": 6,
        "importPath": "core.apps",
        "description": "core.apps",
        "peekOfCode": "class CoreConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'core'",
        "detail": "core.apps",
        "documentation": {}
    },
    {
        "label": "UserManager",
        "kind": 6,
        "importPath": "core.models",
        "description": "core.models",
        "peekOfCode": "class UserManager(BaseUserManager):\n    \"\"\"Define a model manager for User model with no username field.\"\"\"\n    def _create_user(self, email, password=None, **extra_fields):\n        \"\"\"Create and save a User with the given email and password.\"\"\"\n        if not email:\n            raise ValueError('The given email must be set')\n        email = self.normalize_email(email)\n        user = self.model(email=email, **extra_fields)\n        user.set_password(password)\n        user.save(using=self._db)",
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "core.models",
        "description": "core.models",
        "peekOfCode": "class User(AbstractUser):\n    username = None\n    email = models.EmailField(unique=True)\n    USERNAME_FIELD = 'email'\n    REQUIRED_FIELDS = []\n    objects = UserManager()",
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "ecommerce.asgi",
        "description": "ecommerce.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "ecommerce.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = config('SECRET_KEY', cast=str)\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = config('DEBUG', default=False, cast=bool)\nALLOWED_HOSTS = config('ALLOWED_HOSTS', default=[], cast=Csv())\n# Application definition\nINSTALLED_APPS = [",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "SECRET_KEY = config('SECRET_KEY', cast=str)\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = config('DEBUG', default=False, cast=bool)\nALLOWED_HOSTS = config('ALLOWED_HOSTS', default=[], cast=Csv())\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "DEBUG = config('DEBUG', default=False, cast=bool)\nALLOWED_HOSTS = config('ALLOWED_HOSTS', default=[], cast=Csv())\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "ALLOWED_HOSTS = config('ALLOWED_HOSTS', default=[], cast=Csv())\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'storeapp',",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'storeapp',\n    'core',\n    'UserProfile',",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    # 'whitenoise.middleware.WhiteNoiseMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "ROOT_URLCONF = 'ecommerce.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "WSGI_APPLICATION = 'ecommerce.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\n# DATABASES = {\n#     'default': {\n#         'ENGINE': 'django.db.backends.sqlite3',\n#         'NAME': BASE_DIR / 'db.sqlite3'\n#     }\n# }\nDATABASES = {",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "DATABASES = {\n    'default': config(\n        'DB_URL', default='sqlite:///' + str(BASE_DIR / 'db.sqlite3'), cast=dburl\n    )\n}\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [BASE_DIR/'static']",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [BASE_DIR/'static']\nMEDIA_URL = '/media/'",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [BASE_DIR/'static']\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR/'static'",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [BASE_DIR/'static']\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR/'static'\n# Default primary key field type",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [BASE_DIR/'static']\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR/'static'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [BASE_DIR/'static']\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR/'static'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'core.User'\nREST_FRAMEWORK = {",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "STATIC_URL = '/static/'\nSTATICFILES_DIRS = [BASE_DIR/'static']\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR/'static'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'core.User'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "STATICFILES_DIRS = [BASE_DIR/'static']\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR/'static'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'core.User'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR/'static'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'core.User'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "MEDIA_ROOT = BASE_DIR/'static'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'core.User'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'core.User'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nfrom datetime import timedelta\nSIMPLE_JWT = {\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'core.User'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nfrom datetime import timedelta\nSIMPLE_JWT = {\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(\n        seconds=config(\"ACCESS_TOKEN_LIFETIME_SECONDS\", cast=int)    ",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nfrom datetime import timedelta\nSIMPLE_JWT = {\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(\n        seconds=config(\"ACCESS_TOKEN_LIFETIME_SECONDS\", cast=int)    \n    ),",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "ecommerce.settings",
        "description": "ecommerce.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(\n        seconds=config(\"ACCESS_TOKEN_LIFETIME_SECONDS\", cast=int)    \n    ),\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(\n        seconds=config(\"REFRESH_TOKEN_LIFETIME_SECONDS\", cast=int)\n    ),\n    \"AUTH_HEADER_TYPES\": (\"Bearer\",),\n    \"AUTH_HEADER_NAME\": \"HTTP_AUTHORIZATION\",\n    \"USER_AUTHENTICATION_RULE\": \"rest_framework_simplejwt.authentication.default_user_authentication_rule\",",
        "detail": "ecommerce.settings",
        "documentation": {}
    },
    {
        "label": "schema_view",
        "kind": 5,
        "importPath": "ecommerce.urls",
        "description": "ecommerce.urls",
        "peekOfCode": "schema_view = get_schema_view(\n    openapi.Info(\n        title=\"E-commerce API\",\n        default_version='v1',\n        description=\"Documentação da API de e-commerce\",\n        terms_of_service=\"https://www.seusite.com/terms/\",\n        contact=openapi.Contact(email=\"contato@seusite.com\"),\n        license=openapi.License(name=\"Licença MIT\"),\n    ),\n    public=True,",
        "detail": "ecommerce.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "ecommerce.urls",
        "description": "ecommerce.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('storeapp.urls')),\n    path('user/', include('UserProfile.urls')),\n    path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),\n    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),\n    path('api/', include('api.urls')),\n    path('api/user/login/', TokenObtainPairView.as_view(), name='login'),\n    path('api/user/refresh-token/', TokenRefreshView.as_view(), name='token_refresh'),\n    path('api/user/logout/', TokenBlacklistView.as_view(), name='logout')",
        "detail": "ecommerce.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "ecommerce.wsgi",
        "description": "ecommerce.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "ecommerce.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "storeapp.migrations.0001_initial",
        "description": "storeapp.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Cart',\n            fields=[\n                ('cart_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),",
        "detail": "storeapp.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "storeapp.migrations.0002_alter_cartitems_product",
        "description": "storeapp.migrations.0002_alter_cartitems_product",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('storeapp', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='cartitems',\n            name='product',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cartitems', to='storeapp.product'),\n        ),",
        "detail": "storeapp.migrations.0002_alter_cartitems_product",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "storeapp.migrations.0003_cart_session_id",
        "description": "storeapp.migrations.0003_cart_session_id",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('storeapp', '0002_alter_cartitems_product'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='cart',\n            name='session_id',\n            field=models.CharField(default=None, max_length=100),\n        ),",
        "detail": "storeapp.migrations.0003_cart_session_id",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "storeapp.migrations.0004_remove_cart_session_id",
        "description": "storeapp.migrations.0004_remove_cart_session_id",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('storeapp', '0003_cart_session_id'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='cart',\n            name='session_id',\n        ),\n    ]",
        "detail": "storeapp.migrations.0004_remove_cart_session_id",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "storeapp.migrations.0005_cart_session_id",
        "description": "storeapp.migrations.0005_cart_session_id",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('storeapp', '0004_remove_cart_session_id'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='cart',\n            name='session_id',\n            field=models.CharField(default=django.utils.timezone.now, max_length=100),\n            preserve_default=False,",
        "detail": "storeapp.migrations.0005_cart_session_id",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "storeapp.migrations.0006_alter_cart_owner",
        "description": "storeapp.migrations.0006_alter_cart_owner",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('storeapp', '0005_cart_session_id'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='cart',\n            name='owner',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='storeapp.customer'),\n        ),",
        "detail": "storeapp.migrations.0006_alter_cart_owner",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "storeapp.migrations.0007_auto_20220203_1407",
        "description": "storeapp.migrations.0007_auto_20220203_1407",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('UserProfile', '0001_initial'),\n        ('storeapp', '0006_alter_cart_owner'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='cart',\n            name='owner',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='UserProfile.customer'),",
        "detail": "storeapp.migrations.0007_auto_20220203_1407",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "storeapp.migrations.0008_saveditem",
        "description": "storeapp.migrations.0008_saveditem",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('UserProfile', '0002_address_customer'),\n        ('storeapp', '0007_auto_20220203_1407'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='SavedItem',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "storeapp.migrations.0008_saveditem",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "storeapp.migrations.0009_saveditem_added",
        "description": "storeapp.migrations.0009_saveditem_added",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('storeapp', '0008_saveditem'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='saveditem',\n            name='added',\n            field=models.BooleanField(default=False),\n        ),",
        "detail": "storeapp.migrations.0009_saveditem_added",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "storeapp.migrations.0010_remove_saveditem_added",
        "description": "storeapp.migrations.0010_remove_saveditem_added",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('storeapp', '0009_saveditem_added'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='saveditem',\n            name='added',\n        ),\n    ]",
        "detail": "storeapp.migrations.0010_remove_saveditem_added",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "storeapp.migrations.0011_saveditem_added",
        "description": "storeapp.migrations.0011_saveditem_added",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('storeapp', '0010_remove_saveditem_added'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='saveditem',\n            name='added',\n            field=models.IntegerField(default=0),\n        ),",
        "detail": "storeapp.migrations.0011_saveditem_added",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "storeapp.migrations.0012_category_icon",
        "description": "storeapp.migrations.0012_category_icon",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('storeapp', '0011_saveditem_added'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='category',\n            name='icon',\n            field=models.CharField(blank=True, default=None, max_length=100, null=True),\n        ),",
        "detail": "storeapp.migrations.0012_category_icon",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "storeapp.migrations.0013_alter_product_image",
        "description": "storeapp.migrations.0013_alter_product_image",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('storeapp', '0012_category_icon'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='product',\n            name='image',\n            field=models.ImageField(blank=True, default=True, null=True, upload_to='img'),\n        ),",
        "detail": "storeapp.migrations.0013_alter_product_image",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "storeapp.migrations.0014_alter_product_image",
        "description": "storeapp.migrations.0014_alter_product_image",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('storeapp', '0013_alter_product_image'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='product',\n            name='image',\n            field=models.ImageField(blank=True, default='', null=True, upload_to='img'),\n        ),",
        "detail": "storeapp.migrations.0014_alter_product_image",
        "documentation": {}
    },
    {
        "label": "ProductAdmin",
        "kind": 6,
        "importPath": "storeapp.admin",
        "description": "storeapp.admin",
        "peekOfCode": "class ProductAdmin(admin.ModelAdmin):\n    prepopulated_fields = {'slug': ('name',)}\nclass CategoryAdmin(admin.ModelAdmin):\n    prepopulated_fields = {'slug': ('title',)}\nadmin.site.register(Category, CategoryAdmin)\nadmin.site.register(Product, ProductAdmin)\nadmin.site.register(Cart)\nadmin.site.register(Cartitems)\nadmin.site.register(Customer)\nadmin.site.register(SavedItem)",
        "detail": "storeapp.admin",
        "documentation": {}
    },
    {
        "label": "CategoryAdmin",
        "kind": 6,
        "importPath": "storeapp.admin",
        "description": "storeapp.admin",
        "peekOfCode": "class CategoryAdmin(admin.ModelAdmin):\n    prepopulated_fields = {'slug': ('title',)}\nadmin.site.register(Category, CategoryAdmin)\nadmin.site.register(Product, ProductAdmin)\nadmin.site.register(Cart)\nadmin.site.register(Cartitems)\nadmin.site.register(Customer)\nadmin.site.register(SavedItem)",
        "detail": "storeapp.admin",
        "documentation": {}
    },
    {
        "label": "StoreappConfig",
        "kind": 6,
        "importPath": "storeapp.apps",
        "description": "storeapp.apps",
        "peekOfCode": "class StoreappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'storeapp'",
        "detail": "storeapp.apps",
        "documentation": {}
    },
    {
        "label": "cart_renderer",
        "kind": 2,
        "importPath": "storeapp.context_processors",
        "description": "storeapp.context_processors",
        "peekOfCode": "def cart_renderer(request):\n      try:\n         cart = Cart.objects.get(session_id = request.session['nonuser'], completed=False)\n      except:\n         request.session['nonuser'] = str(uuid.uuid4())\n         cart = Cart.objects.create(session_id = request.session['nonuser'], completed=False)\n      return {\n         'cart': cart\n      }",
        "detail": "storeapp.context_processors",
        "documentation": {}
    },
    {
        "label": "AddressForm",
        "kind": 6,
        "importPath": "storeapp.forms",
        "description": "storeapp.forms",
        "peekOfCode": "class AddressForm(ModelForm):\n    class Meta:\n        model = Address\n        fields = ['home_address', 'bus_stop', 'city', 'state']\nclass UpdateUserForm(ModelForm):\n    class Meta:\n        model = Customer\n        fields = ['first_name', 'last_name', 'email']",
        "detail": "storeapp.forms",
        "documentation": {}
    },
    {
        "label": "UpdateUserForm",
        "kind": 6,
        "importPath": "storeapp.forms",
        "description": "storeapp.forms",
        "peekOfCode": "class UpdateUserForm(ModelForm):\n    class Meta:\n        model = Customer\n        fields = ['first_name', 'last_name', 'email']",
        "detail": "storeapp.forms",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "storeapp.models",
        "description": "storeapp.models",
        "peekOfCode": "class Category(models.Model):\n    title = models.CharField(max_length=200)\n    category_id = models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, unique=True)\n    slug = models.SlugField(default= None)\n    featured_product = models.OneToOneField('Product', on_delete=models.CASCADE, blank=True, null=True, related_name='featured_product')\n    icon = models.CharField(max_length=100, default=None, blank = True, null=True)\n    def __str__(self):\n        return self.title\nclass Product(models.Model):\n    name = models.CharField(max_length=200)",
        "detail": "storeapp.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "kind": 6,
        "importPath": "storeapp.models",
        "description": "storeapp.models",
        "peekOfCode": "class Product(models.Model):\n    name = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    discount = models. BooleanField(default=False)\n    image = models.ImageField(upload_to = 'img',  blank = True, null=True, default='')\n    old_price = models.FloatField(default=100.00)\n    category = models.ForeignKey(Category, on_delete=models.SET_NULL, blank=True, null=True, related_name='products')\n    slug = models.SlugField(default=None)\n    id = models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, unique=True)\n    inventory = models.IntegerField(default=5)",
        "detail": "storeapp.models",
        "documentation": {}
    },
    {
        "label": "Cart",
        "kind": 6,
        "importPath": "storeapp.models",
        "description": "storeapp.models",
        "peekOfCode": "class Cart(models.Model):\n    owner = models.ForeignKey(Customer, on_delete=models.CASCADE, null = True, blank=True)\n    cart_id = models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True)\n    created = models.DateTimeField(auto_now_add=True)\n    completed = models.BooleanField(default=False)\n    session_id = models.CharField(max_length=100)\n    @property\n    def num_of_items(self):\n        cartitems = self.cartitems_set.all()\n        qtysum = sum([ qty.quantity for qty in cartitems])",
        "detail": "storeapp.models",
        "documentation": {}
    },
    {
        "label": "Cartitems",
        "kind": 6,
        "importPath": "storeapp.models",
        "description": "storeapp.models",
        "peekOfCode": "class Cartitems(models.Model):\n    cart = models.ForeignKey(Cart, on_delete=models.CASCADE, blank=True, null=True)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE, blank=True, null=True, related_name='cartitems')\n    quantity = models.IntegerField(default=0)\n    @property\n    def subTotal(self):\n        total = self.quantity * self.product.price\n        return total\nclass SavedItem(models.Model):\n    owner = models.ForeignKey(Customer, on_delete=models.CASCADE, null = True, blank=True)",
        "detail": "storeapp.models",
        "documentation": {}
    },
    {
        "label": "SavedItem",
        "kind": 6,
        "importPath": "storeapp.models",
        "description": "storeapp.models",
        "peekOfCode": "class SavedItem(models.Model):\n    owner = models.ForeignKey(Customer, on_delete=models.CASCADE, null = True, blank=True)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE, blank=True, null=True)\n    added = models.IntegerField(default=0)\n    def __str__(self):\n        return str(self.id)",
        "detail": "storeapp.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "storeapp.urls",
        "description": "storeapp.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.index, name = 'index'),\n    path('product/<str:slug>', views.detail, name = 'detail'),\n    path('category/<str:slug>', views.category, name = 'category'),\n    path('cart', views.cart, name = 'cart'),\n    path('updatecart', views.updateCart, name = 'updatecart'),\n    path('updatequantity', views.updateQuantity),\n    path('deleteitems', views.deleteCartitems),\n    path('checkout', views.checkout, name = 'checkout'),\n    path('payment', views.confirmPayment),",
        "detail": "storeapp.urls",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "storeapp.views",
        "description": "storeapp.views",
        "peekOfCode": "def index(request):\n    # try:\n    #     cart = Cart.objects.get(session_id = request.session['nonuser'], completed=False)\n    # except:\n    #     request.session['nonuser'] = str(uuid.uuid4())\n    #     cart = Cart.objects.create(session_id = request.session['nonuser'], completed=False)\n    top_deal = Product.objects.filter(discount=True)\n    categories = Category.objects.all()\n    products = Product.objects.all()\n    context = {'top_deals': top_deal, 'categories':categories, 'products':products }",
        "detail": "storeapp.views",
        "documentation": {}
    },
    {
        "label": "category",
        "kind": 2,
        "importPath": "storeapp.views",
        "description": "storeapp.views",
        "peekOfCode": "def category(request, slug):\n    category = Category.objects.get(slug=slug)\n    products = Product.objects.filter(category=category)\n    context = {'category': category, 'products': products}\n    return render(request, 'storeapp/category.html', context)\ndef detail(request, slug):\n    cart = Cart.objects.get(session_id = request.session['nonuser'], completed=False)\n    product = Product.objects.get(slug=slug)\n    similar_products = Product.objects.filter(category= product.category).exclude(slug=product.slug)\n    counter = 0",
        "detail": "storeapp.views",
        "documentation": {}
    },
    {
        "label": "detail",
        "kind": 2,
        "importPath": "storeapp.views",
        "description": "storeapp.views",
        "peekOfCode": "def detail(request, slug):\n    cart = Cart.objects.get(session_id = request.session['nonuser'], completed=False)\n    product = Product.objects.get(slug=slug)\n    similar_products = Product.objects.filter(category= product.category).exclude(slug=product.slug)\n    counter = 0\n    recently_viewed_products = None\n    try:\n        saveitem = SavedItem.objects.get(product=product)\n        counter = 1\n    except:",
        "detail": "storeapp.views",
        "documentation": {}
    },
    {
        "label": "cart",
        "kind": 2,
        "importPath": "storeapp.views",
        "description": "storeapp.views",
        "peekOfCode": "def cart(request):\n    cart = Cart.objects.get(session_id = request.session['nonuser'], completed=False)\n    cartitems = cart.cartitems_set.all()\n    context = {'cart':cart, 'cartitems': cartitems}\n    return render(request, 'storeapp/cart.html', context)\ndef updateCart(request):\n    data = json.loads(request.body)\n    pro_id = data['p_id']\n    action = data['action']\n    product = Product.objects.get(id=pro_id)",
        "detail": "storeapp.views",
        "documentation": {}
    },
    {
        "label": "updateCart",
        "kind": 2,
        "importPath": "storeapp.views",
        "description": "storeapp.views",
        "peekOfCode": "def updateCart(request):\n    data = json.loads(request.body)\n    pro_id = data['p_id']\n    action = data['action']\n    product = Product.objects.get(id=pro_id)\n    cart = Cart.objects.get(session_id = request.session['nonuser'], completed=False)\n    cartitems, created = Cartitems.objects.get_or_create(product=product, cart=cart)\n    if action == 'add':\n        cartitems.quantity += 1\n    cartitems.save()",
        "detail": "storeapp.views",
        "documentation": {}
    },
    {
        "label": "updateQuantity",
        "kind": 2,
        "importPath": "storeapp.views",
        "description": "storeapp.views",
        "peekOfCode": "def updateQuantity(request):\n    data = json.loads(request.body)\n    product_id = data['id']\n    quantity = data['qty']\n    price = data['product_price']\n    product = Product.objects.get(id=product_id)\n    cart = Cart.objects.get(session_id = request.session['nonuser'], completed=False)\n    cartitems, created = Cartitems.objects.get_or_create(product=product, cart=cart)\n    cartitems.quantity = quantity\n    if int(cartitems.quantity) == 0:",
        "detail": "storeapp.views",
        "documentation": {}
    },
    {
        "label": "deleteCartitems",
        "kind": 2,
        "importPath": "storeapp.views",
        "description": "storeapp.views",
        "peekOfCode": "def deleteCartitems(request):\n    data = json.loads(request.body)\n    # customer = request.user.customer\n    product_id = data['id']\n    product = Product.objects.get(id=product_id)\n    # cart, created = Cart.objects.get_or_create(owner=customer, completed=False)\n    # cartitems, created = Cartitems.objects.get_or_create(product=product, cart=cart)\n    cart = Cart.objects.get(session_id = request.session['nonuser'], completed=False)\n    cartitems = Cartitems.objects.filter(product=product, cart=cart)\n    print(cartitems)",
        "detail": "storeapp.views",
        "documentation": {}
    },
    {
        "label": "checkout",
        "kind": 2,
        "importPath": "storeapp.views",
        "description": "storeapp.views",
        "peekOfCode": "def checkout(request):\n    form = None\n    cart = Cart.objects.get(session_id = request.session['nonuser'], completed=False)\n    cartitems = cart.cartitems_set.all()\n    customer = request.user.customer\n    customer_address = Address.objects.filter(customer=customer)\n    if customer_address:\n        print(customer_address)\n    else:\n        form = AddressForm()",
        "detail": "storeapp.views",
        "documentation": {}
    },
    {
        "label": "account",
        "kind": 2,
        "importPath": "storeapp.views",
        "description": "storeapp.views",
        "peekOfCode": "def account(request):\n    customer = request.user.customer\n    address = Address.objects.filter(customer=customer)\n    context = {'customer': customer, 'address':address}\n    return render(request, 'storeapp/account.html', context)\n@login_required(login_url='signin')\ndef confirmPayment(request):\n    data = json.loads(request.body)\n    total = float(data['total'])\n    print(total)",
        "detail": "storeapp.views",
        "documentation": {}
    },
    {
        "label": "confirmPayment",
        "kind": 2,
        "importPath": "storeapp.views",
        "description": "storeapp.views",
        "peekOfCode": "def confirmPayment(request):\n    data = json.loads(request.body)\n    total = float(data['total'])\n    print(total)\n    cart = Cart.objects.get(session_id = request.session['nonuser'], completed=False)\n    print(cart.cart_total)\n    if total == cart.cart_total:\n        cart.completed = True\n    else:\n        messages.info(request, 'There is an issue with your purchase')",
        "detail": "storeapp.views",
        "documentation": {}
    },
    {
        "label": "saveItems",
        "kind": 2,
        "importPath": "storeapp.views",
        "description": "storeapp.views",
        "peekOfCode": "def saveItems(request):\n    customer = request.user.customer\n    saveitems = SavedItem.objects.filter(owner=customer)\n    context = {'saveitems':saveitems}\n    return render(request, 'storeapp/saveitem.html', context)\n@login_required(login_url='signin')\ndef order(request):\n    customer = request.user.customer\n    orders = Cart.objects.filter(owner=customer)\n    context = {'orders':orders}",
        "detail": "storeapp.views",
        "documentation": {}
    },
    {
        "label": "order",
        "kind": 2,
        "importPath": "storeapp.views",
        "description": "storeapp.views",
        "peekOfCode": "def order(request):\n    customer = request.user.customer\n    orders = Cart.objects.filter(owner=customer)\n    context = {'orders':orders}\n    return render(request, 'storeapp/order.html', context)\n@login_required(login_url='signin')\ndef addSavedItems(request):\n    if request.method=='POST':\n        saveitems = None\n        customer = request.user.customer",
        "detail": "storeapp.views",
        "documentation": {}
    },
    {
        "label": "addSavedItems",
        "kind": 2,
        "importPath": "storeapp.views",
        "description": "storeapp.views",
        "peekOfCode": "def addSavedItems(request):\n    if request.method=='POST':\n        saveitems = None\n        customer = request.user.customer\n        data = json.loads(request.body)\n        counter = data['counter']\n        product_id = data['d']\n        product = Product.objects.get(id=product_id)\n        saveitems, created= SavedItem.objects.get_or_create(owner=customer, product=product)\n        saveitems.added = 1",
        "detail": "storeapp.views",
        "documentation": {}
    },
    {
        "label": "update_user_info",
        "kind": 2,
        "importPath": "storeapp.views",
        "description": "storeapp.views",
        "peekOfCode": "def update_user_info(request):\n    customer = request.user.customer\n    form = UpdateUserForm(instance=customer)\n    if request.method == 'POST':\n        form = UpdateUserForm(request.POST, instance=customer)\n        if form.is_valid():\n            form.save()\n            return redirect ('account')\n    context = {'form': form}\n    return render(request, 'storeapp/update_user.html', context)",
        "detail": "storeapp.views",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 2,
        "importPath": "storeapp.views",
        "description": "storeapp.views",
        "peekOfCode": "def search(request):\n    search_query = request.GET.get('search_query')\n    products = Product.objects.filter(Q(name__icontains=search_query) | Q(category__title__icontains = search_query))\n    context = {'products': products, 'search_query':search_query}\n    return render(request, 'storeapp/search.html', context)",
        "detail": "storeapp.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecommerce.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    },
    {
        "label": "validate_string_field",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def validate_string_field(field_name, value, min_length=False, max_length=False, list_of_errors=defaultdict(list)):\n    \"\"\"Validates a string field to ensure it meets specified length and content criteria.\n    Args:\n        field_name (str): The name of the field being validated, used in the error messages.\n        value (str): The value of the field to validate.\n        min_length (int, optional): The minimum length of the field value. Defaults to 0.\n        max_length (int, optional): The maximum length of the field value. Defaults to 200.\n    Returns:\n        list: A list of error messages, if any.\n    Raises:",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "validate_email_field",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def validate_email_field(email):\n    \"\"\"Validates an email address.\n    Args:\n        email (str): The email address to validate.\n    Returns:\n        bool: True if the email is valid, False otherwise.\n    Raises:\n        ValidationError: If the email address is not valid, a ValidationError is raised.\n    \"\"\"\n    try:",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "validate_password_strength",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def validate_password_strength(password, list_of_errors=[]):\n    \"\"\"Validates the strength of a password.\n    Args:\n        password (str): The password to validate.\n    Returns:\n        list: A list of error messages if the password is weak.\n    Raises:\n        serializers.ValidationError: If the password does not meet the strength criteria.\n    \"\"\"\n    if password is not None:",
        "detail": "utils",
        "documentation": {}
    }
]